#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime
import sys
import os
import argparse
import numpy as np
import pandas as pd

from framework import Katana

def run():
    '''
    katana is a command line program designed to take a config file. This
    will be fed to the run_katana function within framework.
    '''
    # # Path for Docker use only
    # configFile = '/code/awsm/test_data/RME_run/docker_pysnobal.ini'
    #
    # if not os.path.isfile(configFile):
    #     configFile = './test_data/RME_run/config_pysnobal.ini'
    #
    # if len(sys.argv) > 1:
    #     configFile = sys.argv[1]


    #


    # Parse arguments
    p = argparse.ArgumentParser(description='Run Katana wind system.')

    p.add_argument('-sd','--start_date', required=True,
                    help="start date for run")

    p.add_argument('-ed','--end_date', required=True,
                    help="end date for run")

    p.add_argument('-wys','--water_year_start', required=True,
                    help="water year start date for the year")

    p.add_argument('-indir','--input_directory', required=True,
                    help="input directory where hrrr.<date> files are located")

    p.add_argument('-outdir','--output_directory', required=True,
                    help="directory where output will be stored")

    p.add_argument('-wnt','--wn_topo', required=True,
                    help='topo file for WindNinja')

    p.add_argument('-wnp','--wn_prj', required=True,
                    help='projection file for WindNinja')

    p.add_argument('-wnc','--wn_cfg', required=True,
                    help='config file path for WindNinja')

    p.add_argument('-tp','--topo', required=True,
                    help='path to smrf topo netcdf')

    p.add_argument('-zn','--zn_number', required=True,
                    help='UTM zone number for input topo')

    p.add_argument('-zl','--zn_letter', required=True,
                    help='UTM zone letter for input topo')

    p.add_argument('-bf','--buff', required=False, default=6000,
                    help='buffer around SMRF domain for WindNinja input')

    p.add_argument('-nt','--nthreads', required=False, default=1,
                    help='number of WindNinja threads')


    args = p.parse_args()

    fp_dem = os.path.abspath(args.topo)
    zone_letter = args.zn_letter
    zone_number = int(args.zn_number)
    buff = int(args.buff)
    start_date = pd.to_datetime(args.start_date)
    end_date = pd.to_datetime(args.end_date)
    wy_start = pd.to_datetime(args.water_year_start)
    directory = os.path.abspath(args.input_directory)
    out_dir = os.path.abspath(args.output_directory)
    wn_topo = os.path.abspath(args.wn_topo)
    wn_topo_prj = os.path.abspath(args.wn_prj)
    wn_cfg = os.path.abspath(args.wn_cfg)
    nthreads = args.nthreads

    # start_date = args.....

    with Katana(fp_dem, zone_letter, zone_number, buff,
                start_date, end_date,
                wy_start, directory, out_dir, wn_topo,
                wn_topo_prj, wn_cfg, nthreads) as k:
        k.run_katana()

if __name__ == '__main__':

    run()
